// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WARGAME_WARGAME_FB_H_
#define FLATBUFFERS_GENERATED_WARGAME_WARGAME_FB_H_

#include <flatbuffers/flatbuffers.h>

namespace WarGame {
namespace fb {

struct s_vector2u;

struct playerBase;

MANUALLY_ALIGNED_STRUCT(8) s_vector2u FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t x_;
  uint64_t y_;

 public:
  s_vector2u() {
    memset(this, 0, sizeof(s_vector2u));
  }
  s_vector2u(uint64_t _x, uint64_t _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  uint64_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  uint64_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
STRUCT_END(s_vector2u, 16);

struct playerBase FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_ID = 6,
    VT_HEALTH = 8,
    VT_AMMO = 10,
    VT_ORIENTATION = 12,
    VT_STATE = 14,
    VT_POS = 16
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint16_t id() const {
    return GetField<uint16_t>(VT_ID, 0);
  }
  uint16_t health() const {
    return GetField<uint16_t>(VT_HEALTH, 0);
  }
  uint16_t ammo() const {
    return GetField<uint16_t>(VT_AMMO, 0);
  }
  uint16_t orientation() const {
    return GetField<uint16_t>(VT_ORIENTATION, 0);
  }
  uint16_t state() const {
    return GetField<uint16_t>(VT_STATE, 0);
  }
  const s_vector2u *pos() const {
    return GetStruct<const s_vector2u *>(VT_POS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<uint16_t>(verifier, VT_ID) &&
           VerifyField<uint16_t>(verifier, VT_HEALTH) &&
           VerifyField<uint16_t>(verifier, VT_AMMO) &&
           VerifyField<uint16_t>(verifier, VT_ORIENTATION) &&
           VerifyField<uint16_t>(verifier, VT_STATE) &&
           VerifyField<s_vector2u>(verifier, VT_POS) &&
           verifier.EndTable();
  }
};

struct playerBaseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(playerBase::VT_NAME, name);
  }
  void add_id(uint16_t id) {
    fbb_.AddElement<uint16_t>(playerBase::VT_ID, id, 0);
  }
  void add_health(uint16_t health) {
    fbb_.AddElement<uint16_t>(playerBase::VT_HEALTH, health, 0);
  }
  void add_ammo(uint16_t ammo) {
    fbb_.AddElement<uint16_t>(playerBase::VT_AMMO, ammo, 0);
  }
  void add_orientation(uint16_t orientation) {
    fbb_.AddElement<uint16_t>(playerBase::VT_ORIENTATION, orientation, 0);
  }
  void add_state(uint16_t state) {
    fbb_.AddElement<uint16_t>(playerBase::VT_STATE, state, 0);
  }
  void add_pos(const s_vector2u *pos) {
    fbb_.AddStruct(playerBase::VT_POS, pos);
  }
  explicit playerBaseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  playerBaseBuilder &operator=(const playerBaseBuilder &);
  flatbuffers::Offset<playerBase> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<playerBase>(end);
    return o;
  }
};

inline flatbuffers::Offset<playerBase> CreateplayerBase(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint16_t id = 0,
    uint16_t health = 0,
    uint16_t ammo = 0,
    uint16_t orientation = 0,
    uint16_t state = 0,
    const s_vector2u *pos = 0) {
  playerBaseBuilder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_name(name);
  builder_.add_state(state);
  builder_.add_orientation(orientation);
  builder_.add_ammo(ammo);
  builder_.add_health(health);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<playerBase> CreateplayerBaseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint16_t id = 0,
    uint16_t health = 0,
    uint16_t ammo = 0,
    uint16_t orientation = 0,
    uint16_t state = 0,
    const s_vector2u *pos = 0) {
  return WarGame::fb::CreateplayerBase(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      id,
      health,
      ammo,
      orientation,
      state,
      pos);
}

inline const WarGame::fb::playerBase *GetplayerBase(const void *buf) {
  return flatbuffers::GetRoot<WarGame::fb::playerBase>(buf);
}

inline bool VerifyplayerBaseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WarGame::fb::playerBase>(nullptr);
}

inline void FinishplayerBaseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<WarGame::fb::playerBase> root) {
  fbb.Finish(root);
}

}  // namespace fb
}  // namespace WarGame

#endif  // FLATBUFFERS_GENERATED_WARGAME_WARGAME_FB_H_
